if {
	![have_spec hw] &&
	![have_spec nova] &&
	![have_spec sel4]
} {
	puts "Platform is unsupported."
	exit 0
}

create_boot_directory

import_from_depot \
	[depot_user]/src/nitpicker \
	[depot_user]/src/vfs \
	[depot_user]/src/vfs_import \
	[depot_user]/src/vfs_ttf \
	[depot_user]/src/terminal \
	[depot_user]/src/terminal_log \
	[depot_user]/src/file_terminal \
	[depot_user]/src/libc \
	[depot_user]/src/log_core \
	[depot_user]/raw/ttf-bitstream-vera-minimal

set build_components {
	core init timer
	drivers/usb_host
	drivers/ps2
	drivers/framebuffer/intel/pc
	server/dynamic_rom
	server/event_filter
	server/report_rom
	server/event_dump
	app/acpica
	app/acpi_event
	app/nano3d
	test/framebuffer
}

if {[have_spec nova]} {
	proc kernel_output { } { return "novga serial logmem" }
}

set use_acpica_as_acpi_drv 0

source ${genode_dir}/repos/base/run/platform_drv.inc

if {!$use_acpica_as_acpi_drv} {

	# override default platform driver policy
	proc platform_drv_policy {} {
		return {
				<policy label_prefix="intel_fb_drv">
					<pci class="VGA"/>
					<pci bus="0" device="0" function="0"/>
					<pci class="ISABRIDGE"/>
				</policy>
				<policy label_prefix="usb_drv">  <pci class="USB"/> </policy>
				<policy label_prefix="ps2_drv"> <device name="PS2"/> </policy>
				<policy label_prefix="acpica"> <pci class="ALL"/> </policy>}
	}

	# add routing information
	proc platform_drv_add_routing {} {
		return {
				<service name="ROM" label="acpi_ready"> <child name="acpi_state"/> </service>}
	}

	# override default config to react on 'acpi_ready' ROM change
	proc platform_drv_config_config {} {
		return {
			<config acpi_ready="yes">}
	}
}

append_platform_drv_build_components

build $build_components

set config {
	<config>
		<parent-provides>
			<service name="IRQ"/>
			<service name="ROM"/>
			<service name="LOG"/>
			<service name="RM"/>
			<service name="PD"/>
			<service name="CPU"/>
			<service name="IO_MEM" />
			<service name="IO_PORT" />
		</parent-provides>
		<default-route>
			<any-service> <parent/> <any-child/> </any-service>
		</default-route>
		<default caps="100"/>
		<start name="timer">
			<resource name="RAM" quantum="2M"/>
			<provides><service name="Timer"/></provides>
		</start>}

append_if [expr !$use_acpica_as_acpi_drv] config {
		<start name="acpica" caps="250">
			<resource name="RAM" quantum="16M"/>
			<config ld_verbose="yes" reset="no" poweroff="no" report="yes" acpi_ready="yes">
			</config>
			<route>
				<service name="ROM" label="system"> <child name="dynamic_rom"/> </service>
				<service name="Report">  <child name="acpi_state"/> </service>
				<any-service> <parent/> <any-child/> </any-service>
			</route>
		</start>}

append config {
		<start name="acpi_state">
			<binary name="report_rom"/>
			<resource name="RAM" quantum="2M"/>
			<provides>
				<service name="ROM" />
				<service name="Report" />
			</provides>
			<config verbose="yes">
				<policy label="platform_drv -> acpi_ready" report="acpica -> acpi_ready"/>
				<policy label="acpi_event -> acpi_ac"      report="acpica -> acpi_ac"/>
				<policy label="acpi_event -> acpi_battery" report="acpica -> acpi_battery"/>
				<policy label="acpi_event -> acpi_ec"      report="acpica -> acpi_ec"/>
				<policy label="acpi_event -> acpi_fixed"   report="acpica -> acpi_fixed"/>
				<policy label="acpi_event -> acpi_lid"     report="acpica -> acpi_lid"/>
				<policy label="acpi_event -> acpi_hid"     report="acpica -> acpi_hid"/>
			</config>
			<route>
				<any-service> <parent/> </any-service>
			</route>
		</start>

		<start name="reports">
			<binary name="report_rom"/>
			<resource name="RAM" quantum="2M"/>
			<provides>
				<service name="ROM" />
				<service name="Report" />
			</provides>
			<config verbose="no">
			</config>
			<route>
				<any-service> <parent/> </any-service>
			</route>
		</start>

		<start name="dynamic_rom">
			<resource name="RAM" quantum="4M"/>
			<provides><service name="ROM"/></provides>
			<config verbose="yes">
				<rom name="system">
					<inline description="set system state to 'normal'">
						<system state="normal"/>
					</inline>
					<sleep milliseconds="5000" />
					<inline description="set system state to 'reset'">
						<system state="reset"/>
					</inline>
<!--
					<inline description="set system state to 'poweroff'">
						<system state="poweroff"/>
					</inline>
-->
					<sleep milliseconds="500" />
				</rom>
			</config>
		</start>}

append config {
		<start name="event_filter">
			<resource name="RAM" quantum="1M" />
			<provides> <service name="Event" /> </provides>
			<config>
				<output>
					<merge>
						<input name="ps2"/>
						<input name="acpi"/>
					</merge>
				</output>
				<policy label="ps2"  input="ps2"/>
				<policy label="acpi" input="acpi"/>
			</config>
			<route>
				<service name="Event"> <child name="event_dump" /> </service>
				<any-service> <parent/> </any-service>
			</route>
		</start>}

append config {
		<start name="ps2_drv">
			<resource name="RAM" quantum="2M"/>
			<config verbose_keyboard="no" verbose_mouse="no" verbose_scancodes="no"/>
			<route>
				<service name="Platform"> <child name="platform_drv"/> </service>
				<service name="Timer"> <child name="timer"/> </service>
				<service name="Event"> <child name="event_filter" label="ps2"/> </service>
				<any-service> <parent/> </any-service>
			</route>
		</start>

		<start name="event_dump">
			<resource name="RAM" quantum="1M"/>
			<provides> <service name="Event"/> </provides>
			<route>
				<service name="Timer"> <child name="timer"/> </service>
				<any-service> <parent/> </any-service>
			</route>
		</start>}

append config {
		<start name="acpi_event">
			<resource name="RAM" quantum="1M"/>
			<config>
				<!-- example mapping - adapt to your target notebook !!! -->
				<!-- as="PRESS_RELEASE" is default if nothing specified -->
				<map acpi="ec"      value="25"        to_key="KEY_VENDOR"/>
				<map acpi="ec"      value="20"        to_key="KEY_BRIGHTNESSUP"/>
				<map acpi="ec"      value="21"        to_key="KEY_BRIGHTNESSDOWN"/>
				<map acpi="fixed"   value="0"         to_key="KEY_POWER"  as="PRESS_RELEASE"/>
				<map acpi="lid"     value="CLOSED"    to_key="KEY_SLEEP"  as="PRESS"/>
				<map acpi="lid"     value="OPEN"      to_key="KEY_SLEEP"  as="RELEASE"/>
				<map acpi="ac"      value="ONLINE"    to_key="KEY_WAKEUP"/>
				<map acpi="ac"      value="OFFLINE"   to_key="KEY_SLEEP"/>
				<map acpi="battery" value="0"         to_key="KEY_BATTERY"/>
				<map acpi="hid"     value="0x4000000" to_key="KEY_FN_F4"/>
			</config>
			<route>
				<service name="ROM" label="acpi_ac">      <child name="acpi_state"/> </service>
				<service name="ROM" label="acpi_battery"> <child name="acpi_state"/> </service>
				<service name="ROM" label="acpi_ec">      <child name="acpi_state"/> </service>
				<service name="ROM" label="acpi_fixed">   <child name="acpi_state"/> </service>
				<service name="ROM" label="acpi_lid">     <child name="acpi_state"/> </service>
				<service name="ROM" label="acpi_hid">     <child name="acpi_state"/> </service>
				<service name="Event"> <child name="event_filter" label="acpi"/> </service>
				<any-service> <parent/> </any-service>
			</route>
		</start>}

append_platform_drv_config

append config {
		<start name="usb_drv" caps="150">
			<binary name="} [usb_host_drv_binary] {"/>
			<resource name="RAM" quantum="12M"/>
			<provides> <service name="Usb"/> </provides>
			<config bios_handoff="no">
				<report devices="yes"/>
				<policy label_prefix="usb_hid_drv" class="0x3"/>
			</config>
			<route>
				<service name="Report"> <child name="reports"/> </service>
				<any-service> <parent/> <any-child/> </any-service>
			</route>
		</start>

		<start name="intel_fb_drv" caps="1000">
			<binary name="pc_intel_fb_drv"/>
			<resource name="RAM" quantum="60M"/>
			<config ld_verbose="no">
				<report connectors="yes"/>
			</config>
			<route>
				<service name="Report"> <child name="reports"/> </service>
				<any-service> <parent/> <any-child /> </any-service>
			</route>
		</start>

<!--
		<start name="test-framebuffer">
			<resource name="RAM" quantum="10M"/>
			<provides> <service name="Capture"/> </provides>
			<config/>
		</start>
-->

<!--
		<start name="report_fs">
			<binary name="vfs"/>
			<resource name="RAM" quantum="16M"/>
			<provides> <service name="File_system"/> </provides>
			<config>
				<vfs>
					<ram/>
					<import>
						<inline name="log">### start ###</inline>
					</import>
				</vfs>
				<policy label="log_terminal -> "  root="/" writeable="yes"/>
			</config>
		</start>

		<start name="log_terminal">
			<binary name="file_terminal"/>
			<resource name="RAM" quantum="2M"/>
			<provides> <service name="Terminal"/> </provides>
			<config>
			<default-policy filename="log" />
				<vfs> <dir name="dev"> <log/> </dir> <fs/> </vfs>
				<libc stdout="/dev/log"/>
			</config>
			<route>
				<service name="File_system"> <child name="report_fs"/> </service>
				<any-service> <parent/> </any-service>
			</route>
		</start>
-->

		<start name="log_core">
			<binary name="log_core"/>
			<resource name="RAM" quantum="1M"/>
			<config period_ms="2000"/>
			<route>
				<service name="ROM" label="log"> <parent label="core_log"/> </service>
				<service name="Timer">           <child name="timer"/>      </service>
				<service name="LOG" label="log"> <child name="log"/>      </service>
				<any-service> <parent/> </any-service>
			</route>
		</start>

		<start name="log_kernel">
			<binary name="log_core"/>
			<resource name="RAM" quantum="1M"/>
			<config period_ms="2000"/>
			<route>
				<service name="ROM" label="log"> <parent label="kernel_log"/> </service>
				<service name="Timer">           <child name="timer"/>        </service>
				<service name="LOG" label="log"> <child name="log"/>        </service>
				<any-service> <parent/> </any-service>
			</route>
		</start>

		<start name="log">
			<binary name="terminal_log"/>
			<resource name="RAM" quantum="1M"/>
			<provides> <service name="LOG"/> </provides>
			<config/>
			<route>
				<service name="Terminal"> <child name="log_terminal"/> </service>
				<any-service> <parent/> </any-service>
			</route>
		</start>

		<start name="log_terminal">
			<binary name="terminal"/>
			<resource name="RAM" quantum="32M"/>
			<provides> <service name="Terminal"/> </provides>
			<config>
				<initial width="400"/>
				<palette>
					<color index="0" value="#2f3953"/>
					<color index="8" value="#2f3953"/>
				</palette>
				<vfs>
					<rom name="VeraMono.ttf"/>
					<dir name="fonts">
						<dir name="monospace">
							<ttf name="regular" path="/VeraMono.ttf" size_px="14"/>
						</dir>
					</dir>
				</vfs>
			</config>
			<route>
				<service name="Timer">  <child name="timer"/></service>
				<service name="Gui"> <child name="nitpicker"/> </service>
				<any-service> <parent/> </any-service>
			</route>
		</start>

		<start name="nitpicker" caps="120">
			<resource name="RAM" quantum="8M"/>
			<provides>
				<service name="Gui"/> <service name="Capture"/> <service name="Event"/>
			</provides>
			<config focus="rom">
				<capture/> <event/>
				<domain name="pointer" layer="1" content="client" label="no" origin="pointer" />
				<domain name="default" layer="2" content="client" label="no"
				                                 width="1480" height="1070"
				                                  xpos="10"    ypos="10"/>
				<domain name="nano3d"  layer="2" width="400" height="400"
				                                  xpos="1710"  ypos="400"/>

				<policy label_prefix="pointer"      domain="pointer"/>
				<policy label_prefix="nano3d"       domain="nano3d"/>
				<policy label_prefix="log_terminal" domain="default"/>
			</config>
			<route>
				<service name="Timer">  <child name="timer"/></service>
				<service name="Report"> <child name="gui_report_rom"/></service>
				<any-service><parent/></any-service>
			</route>
		</start>

		<start name="pointer">
			<resource name="RAM" quantum="2M"/>
			<provides> <service name="Report"/> </provides>
			<config shapes="yes" verbose="no"/>
			<route>
				<service name="Gui"> <child name="nitpicker"/>  </service>
				<service name="ROM" label="hover"> <child name="gui_report_rom"/> </service>
				<service name="ROM" label="xray"> <child name="gui_report_rom"/> </service>
				<any-service> <parent/> </any-service>
			</route>
		</start>

		<start name="gui_report_rom">
			<binary name="report_rom"/>
			<resource name="RAM" quantum="1M"/>
			<provides> <service name="Report"/> <service name="ROM"/> </provides>
			<config>
				<policy label="pointer -> hover" report="nitpicker -> hover"/>
				<policy label="pointer -> xray"  report="nitpicker -> xray"/>
			</config>
		</start>

		<start name="dynamic_rom">
			<resource name="RAM" quantum="4M"/>
			<provides><service name="ROM"/></provides>
			<config verbose="no">
				<rom name="nano3d.config">
					<inline description="initial state">
						<config painter="textures"/>
					</inline>
					<sleep milliseconds="4000" />
					<inline description="RGBA shading">
						<config painter="shaded"/>
					</inline>
					<sleep milliseconds="4000" />
					<inline description="switch to cube">
						<config painter="shaded" shape="cube" />
					</inline>
					<sleep milliseconds="4000" />
					<inline description="texturing">
						<config painter="textured" shape="cube" />
					</inline>
					<sleep milliseconds="4000" />
				</rom>
			</config>
		</start>

		<start name="nano3d">
			<resource name="RAM" quantum="8M"/>
			<route>
				<service name="ROM" label="config">
					<child name="dynamic_rom" label="nano3d.config"/> </service>
				<any-service> <parent/> <any-child/> </any-service>
			</route>
		</start>
</config>
}

install_config $config

set fd [open [run_dir]/genode/focus w]
puts $fd "<focus label=\"log_terminal -> \" domain=\"default\"/>"
close $fd

set boot_modules {
	core init
	ld.lib.so
	timer
	ps2_drv
	event_filter
	report_rom
	dynamic_rom
	acpica
	acpi_event
	event_dump
	pc_intel_fb_drv
	test-framebuffer
	nano3d
}

append boot_modules " [usb_host_drv_binary] "

append_platform_drv_boot_modules

build_boot_image $boot_modules

append qemu_args "-nographic "

run_genode_until forever
