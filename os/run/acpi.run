if {![have_spec x86]} {
	puts "\nThe ACPI driver supports the x86_32 architecture only\n"
	exit 0
}

#
# Build
#
set build_components {
	core init drivers/timer drivers/pci drivers/acpi drivers/ahci
	drivers/pci/nova
	test/pci test/block
}
build $build_components

create_boot_directory

#
# Generate config
#

set config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="CAP"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="SIGNAL" />
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<start name="acpi">
		<resource name="RAM" quantum="2M"/>
		<binary name="acpi_drv"/>
		<provides>
			<service name="PCI"/>
			<service name="IRQ" />
		</provides>
		<route>
			<service name="PCI"> <any-child /> </service>
			<any-service> <parent/> <any-child /> </any-service>
		</route>
	</start>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
		<route>
			<service name="IRQ"><child name="acpi" /></service>
			<any-service> <parent /> <any-child /></any-service>
		</route>
	</start>
	<start name="ahci">
		<binary name="ahci_drv" />
		<resource name="RAM" quantum="10M" />
		<provides><service name="Block" /></provides>
		<route>
			<service name="IRQ"><child name="acpi" /></service>
			<any-service> <parent /> <any-child /></any-service>
		</route>
	</start>
	<start name="test-block">
		<resource name="RAM" quantum="2M" />
		<route>
			<service name="Block"><child name="ahci"/></service>
			<any-service> <parent/> <any-child /> </any-service>
		</route>
	</start>
</config>
}

#	<start name="test-pci">
#		<resource name="RAM" quantum="1M"/>
#		<route>
#			<service name="PCI"><child name="acpi"/></service>
#			<any-service> <parent /> <any-child /></any-service>
#		</route>
#	</start>

install_config $config

#
# Boot modules
#

set boot_modules {
	core init timer pci_drv acpi_drv ahci_drv
	test-pci test-block
}
if {[have_spec nova]} {
	append boot_modules {pci_device_pd}
}

build_boot_image $boot_modules

#
# Qemu
#

set disk_image "bin/block.img"

append qemu_args " -m 64 -nographic "
append qemu_args " -drive id=disk,file=$disk_image,if=none -device ahci,id=ahci -device ide-drive,drive=disk,bus=ahci.0 -boot d"

if { [file exists $disk_image] == 0 } then {
	# create random block device file
	puts "creating disk image \"$disk_image\""
	catch {
		exec dd if=/dev/urandom of=$disk_image bs=512 count=20480
	}
}

#
# Test
#

run_genode_until "child exited with exit value 0.*\n" 10
